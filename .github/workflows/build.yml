name: GitHub CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REPO_NAME: ${{ github.repository }}
  EVENT_NAME: ${{ github.event_name }}

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        REPO_NAME: ${{ env.REPO_NAME }}
        EVENT_NAME: ${{ env.EVENT_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: GCP
        run: |
          cat > service_account_creds.json << EOF
          ${{ secrets.GCP_CREDS }}
          EOF
      - name: Ubuntu 20.04
        shell: bash
        run: |
          set -x -e
          export BAZEL_OPTIMIZATION="--config=cache"
          if [[ "${EVENT_NAME}" == "push" && "${REPO_NAME}" == "tensorflow/io" ]]; then
            export BAZEL_OPTIMIZATION="$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json"
          fi
          apt update
          apt-get install -y python3
          python3 .github/workflows/build.instruction.py docs/development.md "##### Ubuntu 20.04" > source.sh
          cat source.sh
          bash -x -e source.sh

  linux-bazel:
    name: Bazel Linux
    runs-on: ubuntu-latest
    container:
      image: gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010@sha256:3a9b4820021801b1fa7d0592c1738483ac7abc209fc6ee8c9ef06cf2eab2d170
      env:
        REPO_NAME: ${{ env.REPO_NAME }}
        EVENT_NAME: ${{ env.EVENT_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: GCP
        run: |
          cat > service_account_creds.json << EOF
          ${{ secrets.GCP_CREDS }}
          EOF
      - name: Bazel on Linux
        shell: bash
        run: |
          set -x -e
          export BAZEL_OPTIMIZATION="--config=optimization --config=linux_ci --config=cache"
          if [[ "${EVENT_NAME}" == "push" && "${REPO_NAME}" == "tensorflow/io" ]]; then
            export BAZEL_OPTIMIZATION="$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json"
          fi
          bash -x -e .github/workflows/build.bazel.sh
          sudo cp .bazelrc build/tensorflow_io/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-bazel-bin
          path: |
            build/tensorflow_io
            build/tensorflow_io_gcs_filesystem

  linux-wheel:
    name: Wheel ${{ matrix.python }} Linux
    needs: linux-bazel
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: ${{ runner.os }}-bazel-bin
          path: bazel-bin
      - name: Wheel ${{ matrix.python }} Linux
        run: |
          set -x -e
          mv bazel-bin/tensorflow_io/.bazelrc .
          docker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --project tensorflow-io --data bazel-bin -q bdist_wheel
          docker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel
      - name: Auditwheel ${{ matrix.python }} Linux
        run: |
          set -x -e
          ls dist/*
          for f in dist/*.whl; do
            docker run -i --rm -v $PWD:/v -w /v --net=host quay.io/pypa/manylinux2010_x86_64 bash -x -e /v/tools/build/auditwheel repair --plat manylinux2010_x86_64 $f
          done
          sudo chown -R $(id -nu):$(id -ng) .
          ls wheelhouse/*
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-${{ matrix.python }}-wheel
          path: wheelhouse

  linux-test:
    name: Test ${{ matrix.python }} Linux
    needs: linux-wheel
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: ${{ runner.os }}-${{ matrix.python }}-wheel
          path: wheelhouse
      - name: Setup Linux
        run: |
          set -x -e
          bash -x -e .github/workflows/build.space.sh
          bash -x -e tests/test_pulsar/pulsar_test.sh
          bash -x -e tests/test_kafka/kafka_test.sh
          bash -x -e tests/test_aws/aws_test.sh
          bash -x -e tests/test_gcloud/test_pubsub_bigtable.sh
          bash -x -e tests/test_prometheus/prometheus_test.sh start
          bash -x -e tests/test_elasticsearch/elasticsearch_test.sh start
          bash -x -e tests/test_mongodb/mongodb_test.sh start
          bash -x -e tests/test_azure/start_azure.sh
          bash -x -e tests/test_sql/sql_test.sh
          bash -x -e tests/test_gcloud/test_gcs.sh gcs-emulator
          bash -x -e tests/test_hdfs/hdfs_test.sh
      - name: Test Linux
        run: |
          set -x -e
          df -h
          docker run -i --rm -v $PWD:/v -w /v --net=host \
            buildpack-deps:20.04 \
            bash -x -e .github/workflows/build.wheel.sh python${{ matrix.python }}

  release:
    name: Release
    if: github.event_name == 'push'
    needs: [lint, linux-test, macos-test, windows-test]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: macOS-3.6-wheel
          path: macOS-3.6-wheel
      - uses: actions/download-artifact@v1
        with:
          name: macOS-3.7-wheel
          path: macOS-3.7-wheel
      - uses: actions/download-artifact@v1
        with:
          name: macOS-3.8-wheel
          path: macOS-3.8-wheel
      - uses: actions/download-artifact@v1
        with:
          name: macOS-3.9-wheel
          path: macOS-3.9-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Linux-3.6-wheel
          path: Linux-3.6-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Linux-3.7-wheel
          path: Linux-3.7-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Linux-3.8-wheel
          path: Linux-3.8-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Linux-3.9-wheel
          path: Linux-3.9-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Windows-3.6-wheel
          path: Windows-3.6-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Windows-3.7-wheel
          path: Windows-3.7-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Windows-3.8-wheel
          path: Windows-3.8-wheel
      - uses: actions/download-artifact@v1
        with:
          name: Windows-3.9-wheel
          path: Windows-3.9-wheel
      - run: |
          set -e -x
          mkdir -p wheelhouse
          cp macOS-3.6-wheel/*.whl wheelhouse/
          cp macOS-3.7-wheel/*.whl wheelhouse/
          cp macOS-3.8-wheel/*.whl wheelhouse/
          cp macOS-3.9-wheel/*.whl wheelhouse/
          cp Linux-3.6-wheel/*.whl wheelhouse/
          cp Linux-3.7-wheel/*.whl wheelhouse/
          cp Linux-3.8-wheel/*.whl wheelhouse/
          cp Linux-3.9-wheel/*.whl wheelhouse/
          cp Windows-3.6-wheel/*.whl wheelhouse/
          cp Windows-3.7-wheel/*.whl wheelhouse/
          cp Windows-3.8-wheel/*.whl wheelhouse/
          cp Windows-3.9-wheel/*.whl wheelhouse/
          ls -la wheelhouse/
          sha256sum wheelhouse/*.whl
      - uses: actions/upload-artifact@v2
        with:
          name: tensorflow-io-release
          path: wheelhouse

  docker-release:
    name: Docker Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [lint, linux-test, macos-test, windows-test]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - run: |
          set -e -x
          docker login --username tfsigio --password ${{ secrets.DOCKER_PASSWORD }}
          bash -x -e tools/docker/tests/dockerfile_cpu_test.sh
          docker push tfsigio/tfio:latest
          python --version
          TFIO_VERSION=$(python setup.py --project tensorflow-io --version | tail -1)
          docker tag tfsigio/tfio:latest tfsigio/tfio:${TFIO_VERSION}
          docker push tfsigio/tfio:${TFIO_VERSION}
          bash -x -e tools/docker/tests/dockerfile_devel_test.sh
          docker push tfsigio/tfio:latest-devel

  build-number:
    name: Build Number
    if: github.event_name == 'push'
    runs-on: ubuntu-18.04
    steps:
      - run: |
          set -e -x
          BUILD_NUMBER=$(date "+%Y%m%d%H%M%S")
          echo ${BUILD_NUMBER} > BUILD_NUMBER
      - uses: actions/upload-artifact@v2
        with:
          name: BUILD_NUMBER
          path: BUILD_NUMBER

  test-aarch64:
    name: "Wheel ${{ matrix.pyver }} aarch64"
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
        arch: [aarch64]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_${{ matrix.arch }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Install dependencies
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m pip install virtualenv && ${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            set -x -e && \
            export BAZEL_OPTIMIZATION="--config=optimization --config=linux_ci --config=cache" && \
            bash -x -e .github/workflows/build.bazel.sh && \
            sudo cp .bazelrc build/tensorflow_io/ && \
            mv bazel-bin/tensorflow_io/.bazelrc . && \
            pip install wheel && \
            python setup.py --project tensorflow-io --data bazel-bin -q bdist_wheel && \
            python setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel && \
            ls dist/* && \
            deactivate'
